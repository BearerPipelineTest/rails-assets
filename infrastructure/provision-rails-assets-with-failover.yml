---
- name: basic provisioning
  hosts: all
  user: root
  roles:
    - role: rvm_io.ruby
      rvm1_rubies:
        - 'ruby-2.2.3'
      rvm1_install_path: '/usr/local/rvm'
      rvm1_install_flags: '--auto-dotfiles'
      rvm1_user: 'root'
      rvm1_gpg_keys: ''

    - role: kamaln7.swapfile
      swapfile_use_dd: True
      swapfile_size: 4096

  tasks:
    - name: update installed packages
      apt:
        upgrade: "safe"
        update_cache: yes
        cache_valid_time: "3600"
    - name: add key
      apt_key:
        url: 'https://packages.elastic.co/GPG-KEY-elasticsearch'
    - name: add elasticsearch repo
      apt_repository:
        state: "present"
        repo: "deb https://artifacts.elastic.co/packages/5.x/apt stable main"
    - name: install server base packages
      apt:
        name: "{{ item }}"
        state: "latest"
        update_cache: "yes"
      with_items:
        - apt-file
        - bc
        - build-essential
        - curl
        - dnsutils
        - filebeat
        - gettext
        - git
        - htop
        - iftop
        - iotop
        - jq
        - libcurl4-openssl-dev
        - libgmp-dev
        - libpq-dev
        - libxml2-utils
        - metricbeat
        - moreutils
        - nodejs
        - nodejs-legacy
        - npm
        - ntp
        - pcregrep
        - pv
        - python-pip
        - python-psycopg2
        - python-virtualenv
        - redis-tools
        - rsync
        - silversearcher-ag
        - speedometer
        - ssmtp
        - texinfo
        - tmux
        - ufw
        - wget
        - xmlstarlet
        - zsh
    - name: install bower
      npm:
        name: "bower"
        global: yes
        version: "1.3.12"
    - name: install ssmtp.conf
      template:
        src: "ssmtp.conf"
        dest: "/etc/ssmtp/ssmtp.conf"

- name: install database packages
  hosts: database
  user: root
  tasks:
    - apt:
        name: "{{ item }}"
        state: "latest"
        update_cache: yes
      with_items:
        - redis-server
        - postgresql
        - postgresql-contrib

- name: create users and configure authentication
  hosts: all
  user: root
  tasks:
    - name: setup app group
      group:
        name: "{{ app_name }}"
        state: "present"

    - name: setup app user
      user:
        name: "{{ app_name }}"
        shell: "/bin/bash"
        groups: "rvm,{{ app_name }}"
        append: yes
        generate_ssh_key: yes
      register: app_user

    - authorized_key: user={{ item }}
                      key="{{ lookup('file', 'keys.txt') }}"
      with_items:
        - root
        - "{{ app_name }}"

    - name: setup engineers accounts
      user:
        name: "{{ item.username }}"
        shell: "{{ item.shell }}"
        groups: "rvm,{{ app_name }},staff,users"
        append: "yes"
      with_items: "{{ engineers }}"

    - name: setup authorized keys for engineers
      authorized_key:
        user: "{{ item.username }}"
        key: "https://github.com/{{ item.github }}.keys"
      with_items: "{{ engineers }}"
      changed_when: False # workaround for bug where authorized_key always chagned

    - name: trust own key for rsync
      authorized_key:
        user: "{{ item }}"
        key: "{{ app_user.ssh_public_key }}"
      with_items:
        - root
        - "{{ app_name }}"

    - name: enable agent forwarding
      lineinfile:
        dest: "/etc/ssh/sshd_config"
        state: "present"
        regexp: "^AllowAgentForwarding"
        line: "AllowAgentForwarding yes"
      notify: restart sshd

  handlers:
    - name: restart sshd
      service:
        name: "ssh"
        state: "restarted"

- name: configure firewall
  hosts: web:!secondary
  user: root
  tasks:
    - ufw:
        rule: "allow"
        port: "{{ item }}"
        proto: "tcp"
      with_items:
        - 22
        - 80
        - 443
    - ufw:
        rule: "allow"
        proto: "any"
        src: "{{ hostvars[item]['ansible_eth1']['ipv4']['address'] }}"
      with_inventory_hostnames: all
    - ufw:
        policy: "allow"
        direction: "outgoing"
    - ufw:
        policy: "reject"
        direction: "incoming"
    - ufw: state=enabled # also reloads!

- name: "grab main certs from primary server"
  hosts: secondary
  remote_user: root
  tags:
    - secondary-certs
  tasks:
    - name: "find out if rails-assets.org cert exists"
      stat: path=/etc/letsencrypt/live/rails-assets.org
      register: rails_assets_cert
    - name: "synchronize rails-assets.org letsencrypt certs"
      command: >-
        rsync -av rails-assets.org:/etc/letsencrypt/ /etc/letsencrypt/
      when: not rails_assets_cert.stat.exists

- name: install and configure web packages
  hosts: web
  user: root
  tasks:
    - name: "add phusion apt key"
      apt_key:
        keyserver: "keyserver.ubuntu.com"
        id: "561F9B9CAC40B2F7"
    - name: "install passenger apt repository"
      apt_repository:
        state: "present"
        repo: "deb https://oss-binaries.phusionpassenger.com/apt/passenger xenial main"
    - name: "install web packages"
      apt:
        name: "{{ item }}"
        state: "latest"
        update_cache: yes
      with_items:
        - apt-transport-https
        - ca-certificates
        - letsencrypt
        - nginx-extras
        - passenger
    - name: "determine passenger root"
      shell: passenger-config --root
      register: passenger_root
      changed_when: false
    - name: "set charset"
      lineinfile: dest=/etc/nginx/nginx.conf state=present
        regexp='^\s*charset '
        insertafter='^http {'
        line='        charset utf-8;'
      notify: restart nginx
    - name: "configure nginx access log to use combined format"
      lineinfile:
        dest=/etc/nginx/nginx.conf state=present
        regexp='^\s*access_log'
        insertafter='^http {'
        line='        access_log /var/log/nginx/access.log combined;'
      notify: restart nginx
    - name: "set nginx user"
      lineinfile: dest=/etc/nginx/nginx.conf state=present
        regexp='^user'
        line="user {{ app_name }};"
      notify: restart nginx
    - name: "set passenger root"
      lineinfile: dest=/etc/nginx/nginx.conf state=present
        regexp='^\s*passenger_root'
        insertafter='^http {'
        line="        passenger_root {{ passenger_root.stdout }};"
      notify: restart nginx
    - name: "set passenger_ruby"
      lineinfile: dest=/etc/nginx/nginx.conf state=present
        regexp='^\s*passenger_ruby'
        insertafter='^http {'
        line='        passenger_ruby /usr/local/bin/ruby;'
      notify: restart nginx
    - name: "set worker connections"
      lineinfile: dest=/etc/nginx/nginx.conf state=present
        regexp='^\s*worker_connections'
        insertafter='^event {'
        line='        worker_connections 1024;'
      notify: restart nginx
    - name: "set client_max_body_size"
      lineinfile: dest=/etc/nginx/nginx.conf state=present
        regexp='^\s*client_max_body_size'
        insertafter='^http {'
        line='        client_max_body_size 50m;'
      notify: restart nginx
    - name: "set passenger_max_pool_size"
      lineinfile: dest=/etc/nginx/nginx.conf state=present
        regexp='^\s*passenger_max_pool_size'
        insertafter='^http {'
        line='        passenger_max_pool_size 12;'
      notify: restart nginx
    - name: "set infinite passenger_max_request_queue_size"
      lineinfile: dest=/etc/nginx/nginx.conf state=present
        regexp='^\s*passenger_max_request_queue_size'
        insertafter='^http {'
        line='        passenger_max_request_queue_size 0;'
      notify: restart nginx
    - name: "generate diffie-hellman params"
      command: >-
        openssl dhparam -out /etc/ssl/dhparam.pem 2048
        creates=/etc/ssl/dhparam.pem
    - name: "copy nginx template"
      template:
        src: "nginx-site.conf.j2"
        dest: "/etc/nginx/sites-enabled/{{ app_name }}.conf"
      notify: restart nginx
    - name: "remove default enabled site from nginx"
      file:
        path: "/etc/nginx/sites-enabled/default"
        state: "absent"
      notify: restart nginx
    - name: fix permissions for nginx+passenger+logrotate
      file:
        path: "/var/log/nginx"
        state: "directory"
        mode: "u=rwx,g=rx,o=rx"
    - name: logrotate script
      copy:
        src: "logrotate-nginx"
        dest: "/etc/logrotate.d/nginx"
        mode: "0644"
    - name: rails-assets production logrotate
      copy:
        src: "logrotate-rails-assets"
        dest: "/etc/logrotate.d/rails-assets"
        mode: "0644"
  handlers:
    - name: restart nginx
      service:
        name: "nginx"
        state: "restarted"

- name: centralize logging
  hosts: web
  user: root
  tasks:
    - name: configure filebeat
      copy:
        src: "files/filebeat.yml"
        dest: "/etc/filebeat/filebeat.yml"
        mode: "0644"
    - name: configure metricbeat
      copy:
        src: "files/metricbeat.yml"
        dest: "/etc/metricbeat/metricbeat.yml"
        mode: "0644"
    - name: start filebeat
      service:
        name: filebeat
        state: restarted
    - name: start metricbeat
      service:
        name: metricbeat
        state: restarted

- name: configure serving directories and app config
  hosts: web:worker
  user: root
  tasks:
    - name: "make /srv/data directory"
      file:
        path: "/srv/data"
        state: "directory"
        owner: "{{ app_name }}"
        group: "users"
        mode: "u=rwx,g=rwx,o=rx"

    - name: "make app directory"
      file:
        path: "/home/{{ app_name }}/rails-apps/{{ app_name }}"
        owner: "{{ app_name }}"
        group: "users"
        mode: "0770"
        state: "directory"

    - name: "make config directory"
      file:
        path: "/home/{{ app_name }}/rails-apps/{{ app_name }}/shared/config"
        owner: "{{ app_name }}"
        group: "users"
        mode: "0770"
        state: "directory"

    - name: "make public symlink"
      file:
        src: "/srv/data"
        dest: "/home/{{ app_name }}/rails-apps/{{ app_name }}/shared/public"
        owner: "{{ app_name }}"
        group: "users"
        state: "link"
        force: "yes"

    - name: "copy application.yml template"
      template:
        src: "application.yml"
        dest: "/home/{{ app_name }}/rails-apps/{{ app_name }}/shared/config/application.yml"
        owner: "{{ app_name }}"
        group: "users"
        mode: "0660"

    - name: "install database.yml"
      template:
        src: "database.yml"
        dest: "/home/{{ app_name }}/rails-apps/{{ app_name }}/shared/config/database.yml"
        owner: "{{ app_name }}"
        group: "users"
        mode: 0660

    - name: "Copy passenger-watchdog script"
      template:
        src: "passenger-watchdog"
        dest: "/home/{{ app_name}}/passenger-watchdog"
        mode: 0770
        owner: "{{ app_name }}"
        group: "users"

    - name: "Install passenger-watchdog into cron"
      cron:
        name: "passenger-watchdog"
        job: "/home/{{ app_name}}/passenger-watchdog 2> /dev/null"

# - name: configure data directories for data server (web)
#   hosts: web:!secondary
#   user: root
#   tasks:
#     - apt:
#         name: "nfs-kernel-server"
#         state: "latest"
#       notify: reload nfs server
#     - lineinfile:
#         dest: "/etc/exports"
#         state: "present"
#         regexp: "^/srv/data "
#         line: "/srv/data 10.132.0.0/16(rw,insecure,sync,all_squash,anonuid=1000,anongid=1001,no_subtree_check)"
#       notify: reload exports

#   handlers:
#     - name: "reload exports"
#       command: "exportfs -a"
#     - name: "reload nfs server"
#       service:
#         name: "nfs-kernel-server"
#         state: "restarted"

- name: configure data directory for worker (remote mount)
  hosts: worker:!secondary
  user: root
  tasks:
    - apt:
        name: "nfs-common"
        state: "present"
        update_cache: "no"
# Skip mounting until we verify that
# the build is fine without the separate server
#     - mount:
#         src: "{{ hostvars['rails-assets.org']['ansible_eth1']['ipv4']['address'] }}:/srv/data"
#         name: "/srv/data"
#         fstype: "nfs"
#         opts: "auto"
#         dump: "0"
#         passno: "0"
#         state: "mounted"
#       when: ansible_hostname != 'rails-assets.org'

- name: sidekiq systemd worker configuration
  hosts: worker
  user: root
  tasks:
    - name: "copy sudoers file for worker permissions"
      copy:
        src: "files/sudoers"
        dest: "/etc/sudoers.d/rails-assets"
        mode: "0440"
    - name: "copy worker systemd template"
      template:
        src: "files/systemd/rails-assets-build.service"
        dest: "/lib/systemd/system/rails-assets-build.service"
      notify: bounce worker
  handlers:
    - name: bounce worker
      systemd:
        daemon_reload: true
        name: "rails-assets-build"
        enabled: true
        state: restarted

- name: install lets-encrypt and certificate cron job
  user: root
  hosts: web:!secondary
  tasks:
    - name: lets-encrypt certificate renewal cron job
      cron:
        name: "renew-certificate"
        job: "letsencrypt renew"
        special_time: "daily"

- name: configure postgres secondary
  hosts: secondary
  user: root
  tasks:
    - name: configure postgresql to listen on private network
      lineinfile: dest=/etc/postgresql/9.5/main/postgresql.conf
                  regexp="^listen_addresses"
                  line="listen_addresses = 'localhost'"
      notify: restart postgres

    - name: configure postgresql to blindly trust private network
      lineinfile: dest=/etc/postgresql/9.5/main/pg_hba.conf
                  regexp="^host\s+all\s+rails_assets\s+"
                  line="host all rails_assets 127.0.0.1/32 trust"
      notify: restart postgres

    - name: configure postgresql to trust local users
      lineinfile: dest=/etc/postgresql/9.5/main/pg_hba.conf
                  regexp="^local\s+all\s+all\s+"
                  line="local all all trust"
      notify: restart postgres

    - name: configure redis to listen on private network
      lineinfile: dest=/etc/redis/redis.conf
                  state=present
                  regexp="^bind"
                  line="bind 127.0.0.1"
      notify: restart redis
  handlers:
    - name: restart postgres
      service: name=postgresql state=restarted
    - name: restart redis
      service: name=redis-server state=restarted


- name: configure postgres and redis
  hosts: database:!secondary
  user: root
  tags:
    - db
  tasks:
    - name: configure postgresql to listen on private network
      lineinfile: dest=/etc/postgresql/9.5/main/postgresql.conf
                  regexp="^listen_addresses"
                  line="listen_addresses = 'localhost,{{ ansible_eth1.ipv4.address }}'"
      notify: restart postgres

    - name: configure postgresql to blindly trust private network
      lineinfile: dest=/etc/postgresql/9.5/main/pg_hba.conf
                  regexp="^host\s+all\s+rails_assets\s+"
                  line="host all rails_assets {{ ansible_eth1.ipv4.address }}/16 trust"
      notify: restart postgres

    - name: configure postgresql to trust local users
      lineinfile: dest=/etc/postgresql/9.5/main/pg_hba.conf
                  regexp="^local\s+all\s+all\s+"
                  line="local all all trust"
      notify: restart postgres

    - name: configure redis to listen on private network
      lineinfile: dest=/etc/redis/redis.conf
                  state=present
                  regexp="^bind"
                  line="bind 127.0.0.1 {{ ansible_eth1.ipv4.address }}"
      notify: restart redis
  handlers:
    - name: restart postgres
      service: name=postgresql state=restarted
    - name: restart redis
      service: name=redis-server state=restarted

- name: configure application postgres database
  hosts: database
  user: root
  become: True
  become_user: postgres
  tags:
    - db
  tasks:
    - postgresql_db: name="rails_assets_{{ rails_env }}"
                     state=present
    - postgresql_user: db="rails_assets_{{ rails_env }}"
                       name=rails_assets
                       priv=ALL
                       role_attr_flags=CREATEDB,CREATEROLE,SUPERUSER

- name: install secondary failover scripts
  hosts: secondary
  user: root
  tags:
    - secondary
  tasks:
    - name: copy primary-copydown script
      copy:
        src: primary-copydown
        dest: /usr/local/bin/primary-copydown
        mode: 0750
    - name: use bash for cron (/bin/sh lacks safety features in copydown)
      cron:
        env: yes
        name: "SHELL"
        value: "/bin/bash"
    - name: install primary-copydown into cron
      cron:
        name: "primary-copydown"
        hour: "*/4"
        minute: "0"
        job: "/usr/local/bin/primary-copydown &> /dev/null && curl -fsS --retry 3 https://hchk.io/878521e4-7bee-43ab-b8b2-228ae4edc46b &> /dev/null"
